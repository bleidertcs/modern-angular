name: Angular Build, Tag and Release

on:
  pull_request:
    branches: [main]

jobs:
  version:
    name: Create version number
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      - uses: actions/checkout@v3
      - name: Fetch all history for all tags and branches
        run: |
          git config remote.origin.url https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git fetch --prune --depth=10000
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: "5.x"
      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
      - name: Create version.txt with nuGetVersion
        run: echo ${{ steps.gitversion.outputs.nuGetVersion }} > version.txt
      - name: Upload version.txt as artifact
        uses: actions/upload-artifact@v2
        with:
          name: gitversion
          path: version.txt

  build:
    runs-on: ubuntu-latest
    needs: version
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: "package-lock.json"
      - run: npm ci
      - run: npm run build

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: gitversion

      - name: Get version.txt
        uses: actions/download-artifact@v2
        with:
          name: gitversion
      - name: Create new file without newline char from version.txt
        run: tr -d '\n' < version.txt > version1.txt
      - name: Read version
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: version1.txt

      - uses: actions/checkout@v4
      - uses: fregante/setup-git-user@v2

      - name: Get last commit message
        id: last_commit
        run: echo "LAST_COMMIT=$(git log -1 --pretty=format:'%s')" >> $GITHUB_ENV

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:  v${{ steps.version.outputs.content }}
          release_name: Build v${{ steps.version.outputs.content }}
          body: |
            **ðŸš€ New Release Published!**
            * **Repository:** ${{ github.repository }}
            * **Release Name:** ${{ github.event.release.name }}
            * **Tag:** ${{ github.event.release.tag_name }}
            * **Author:** ${{ github.actor }}
            * **Commit:** ${{ github.sha }}
            * **Commit message 2:** ${{ github.event.commits[0].message }}
            * **Latest Commit 3:** ${{ env.LAST_COMMIT }}
            * **Link:** ${{ github.server_url }}/{{ github.repository }}/releases/tag/${{ github.ref  || 'latest' }}

          draft: false
          prerelease: false

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: dist
          token: ${{ secrets.GITHUB_TOKEN  }}
          commit: ${{ github.sha }}
          tag: ${{ steps.version.outputs.content }}

      - name: Deploy
        run: |
          npm install
          npm run-script build
      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@releases/v4
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: dist

  send_notification:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Send Telegram message
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.CHAT_ID }}&text=**ðŸš€ New Release Published!**
            * **Repository:** ${{ github.repository }}
            * **Release Name:** ${{ github.event.release.name }}
            * **Tag:** ${{ github.event.release.tag_name }}
            * **Author:** ${{ github.actor }}
            * **Commit:** ${{ github.sha }}
            * **Commit message 2:** ${{ github.event.commits[0].message }}
            * **Latest Commit 3:** ${{ env.LAST_COMMIT }}
            * **Link:** ${{github.server_url}}/{{github.repository}}/releases/tag/${{github.ref || 'latest' }}"
